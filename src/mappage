#!/bin/bash

#
# DjVu line numerator (c) Grzegorz Chimosz 2008-2009
# released under GNU GPL with ABSOLUTELY NO WARRANTY
#

SCRIPTSDIR="/usr/share/mappage"
CONVERT=convert
CPALDJVU=cpaldjvu
DDJVU=ddjvu
SEGMENTPAGE="ocroscript $SCRIPTSDIR/segment-page.lua"
SORT=sort
FILTER="python $SCRIPTSDIR/filter-line.py"
DJVUSED=djvused

print_usage_and_exit() {
	echo "usage"
	echo -e "\t$0 <input.djvu> <output.djvu> [-k] [-c] [-n] [-f \"filteropts\"]"
	echo
	echo -e "\toptions"
	echo -e "\t\t-k\tkeep temporary files"
	echo -e "\t\t-c\tcolorize output"
	echo -e "\t\t-n\tnumerate lines"
	echo -e "\t\t-f \"filteropts\""
	echo -e "\t\t\tpass \"filteropts\" to filter"

	exit $1
}

#
# main script
#

echo "DjVu line numerator v.0.1.1 (c) Grzegorz Chimosz 2008-2009"
echo "released under GNU GPL with ABSOLUTELY NO WARRANTY"

# if too few parameters 
if [ $# -lt 2 ]; then
	print_usage_and_exit 1
fi

INPUT="$1"
OUTPUT="$2"
shift 2

# parse and set options
KEEPTMP=""
COLORIZE=""
NUMERATE=""
FILTEROPTS=""

while getopts ":kcnhf:" op ; do
	case $op in
		"k" ) KEEPTMP="1";;
		"c" ) COLORIZE="1";;
		"n" ) NUMERATE="1";;
		"h" ) print_usage_and_exit 0;;
		"f" ) FILTEROPTS="$OPTARG";;
		":" ) echo "\nERROR: give an argument to the \"-$OPTARG\" option\n"
					print_usage_and_exit 1;;
		"?" ) echo -e "\nERROR: unrecognized option \"-$OPTARG\"\n"
					print_usage_and_exit 1;;
		esac
done

# convert djvu file to png
$DDJVU -format=tiff "$INPUT" "$INPUT.tiff" || { echo "ERROR: $DDJVU" ; exit 2; }
$CONVERT "$INPUT.tiff" "$INPUT.png" || { echo "ERROR: $CONVERT <input>" ; exit 2; }

# exec ocroscript and process page
if [ "$COLORIZE" ]; then
	$SEGMENTPAGE "$INPUT.png" "$OUTPUT.png" "$OUTPUT.box" -c || { echo "ERROR: $SEGMENTPAGE" ; exit 2; }
else
	$SEGMENTPAGE "$INPUT.png" "$OUTPUT.png" "$OUTPUT.box" || { echo "ERROR: $SEGMENTPAGE" ; exit 2; }
fi

# convert "cleaned" (and colorized if set) png back to djvu
$CONVERT "$OUTPUT.png" "$OUTPUT.ppm" || { echo "ERROR: $CONVERT <output>" ; exit 2; }
$CPALDJVU "$OUTPUT.ppm" "$OUTPUT" || { echo "ERROR: $CPALDJVU" ; exit 2; }


if [ "$NUMERATE" ]; then
	# filter lines and put numbers
	$FILTER "$OUTPUT.box" "$FILTEROPTS" || { echo "ERROR: $FILTER" ; exit 2; }

	# convert filtered box to djvused script
	sed -e "s/^\([0-9]*\) \(.*\)$/(maparea \"#+0\" \"line \1\" (rect \2) (border #0000FF))/" "$OUTPUT.box" > "$OUTPUT.djvused" || { echo "ERROR: sed" ; exit 2; }

	# set annotations
	$DJVUSED -s -e "select 1; set-ant $OUTPUT.djvused" "$OUTPUT" || { echo "ERROR: $DJVUSED" ; exit 2; }
fi

# clean

# assume that input djvu is converted to png without problem
rm "$INPUT.tiff" 2> /dev/null
if [ "$INPUT" != "$OUTPUT" ]; then
	rm "$INPUT.png" 2> /dev/null
fi

if [ -z "$KEEPTMP" ]; then
	rm "$OUTPUT.png" "$OUTPUT.ppm" "$OUTPUT.box" "$OUTPUT.djvused" 2> /dev/null
fi
